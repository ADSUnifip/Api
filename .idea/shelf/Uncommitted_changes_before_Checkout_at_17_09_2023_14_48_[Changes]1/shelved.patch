Index: api/src/main/java/com/project/api/ApiApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.api;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class  ApiApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(ApiApplication.class, args);\r\n\t}\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/main/java/com/project/api/ApiApplication.java b/api/src/main/java/com/project/api/ApiApplication.java
--- a/api/src/main/java/com/project/api/ApiApplication.java	
+++ b/api/src/main/java/com/project/api/ApiApplication.java	
@@ -2,7 +2,11 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.domain.EntityScan;
+import org.springframework.context.annotation.ComponentScan;
 
+@EntityScan(basePackages = "com.project.api.models")
+@ComponentScan("com.project.api.services.PatientService")
 @SpringBootApplication
 public class  ApiApplication {
 
Index: api/src/main/java/com/project/api/services/PatientService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/main/java/com/project/api/services/PatientService.java b/api/src/main/java/com/project/api/services/PatientService.java
new file mode 100644
--- /dev/null	
+++ b/api/src/main/java/com/project/api/services/PatientService.java	
@@ -0,0 +1,65 @@
+package com.project.api.services;
+
+import com.project.api.models.Patient;
+import com.project.api.repositories.PatientRepository;
+import jakarta.transaction.Transactional;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.util.ReflectionUtils;
+
+import java.lang.reflect.Field;
+import java.math.BigDecimal;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import java.util.UUID;
+
+public class PatientService {
+
+    @Autowired
+    final PatientRepository patientRepository;
+
+    public PatientService(PatientRepository patientRepository){
+        this.patientRepository = patientRepository;
+    }
+
+    public List<Patient> findAll(){
+        return patientRepository.findAll();
+    }
+
+    public Optional<Patient> findById(UUID id){
+        return patientRepository.findById(id);
+    }
+
+    public Optional<Patient> findByCpf(String cpf){
+        return patientRepository.findByCpf(cpf);
+    }
+
+    public Optional<Patient> findByFullName(String fullName){
+        return patientRepository.findByFullName(fullName);
+    }
+
+    @Transactional
+    public Patient save(Patient patient){
+        return patientRepository.save(patient);
+    }
+
+    public Patient partialUpdate(Patient patient, Map<Object, Object> objectMap){
+        objectMap.forEach((key, value) -> {
+            Field field = ReflectionUtils.findField(Patient.class, (String) key);
+            field.setAccessible(true);
+
+            try{
+                value = BigDecimal.valueOf((double) value);
+            }
+            catch (ClassCastException ignored){}
+            ReflectionUtils.setField(field, patient, value);
+        });
+        return patientRepository.save(patient);
+    }
+
+    public void softDelete(Patient patient){
+        Optional<Patient> patientDelete = patientRepository.findById(patient.getId());
+        patientDelete.ifPresent(value -> value.setActive(false));
+    }
+
+}
Index: api/src/main/java/com/project/api/controllers/PatientController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/main/java/com/project/api/controllers/PatientController.java b/api/src/main/java/com/project/api/controllers/PatientController.java
new file mode 100644
--- /dev/null	
+++ b/api/src/main/java/com/project/api/controllers/PatientController.java	
@@ -0,0 +1,79 @@
+package com.project.api.controllers;
+
+import com.project.api.dtos.PatientDto;
+import com.project.api.models.Patient;
+import com.project.api.services.PatientService;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.validation.Valid;
+import org.springframework.beans.BeanUtils;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.validation.annotation.Validated;
+import org.springframework.web.bind.annotation.*;
+
+import java.io.IOException;
+import java.util.*;
+
+@RestController
+@RequestMapping("api/patient")
+@CrossOrigin(origins = "*", maxAge = 3600)
+public class PatientController {
+    @Autowired
+    PatientService patientService;
+
+    @GetMapping
+    public ResponseEntity<List<Patient>> getAllPatient(){
+        return ResponseEntity.status(HttpStatus.OK).body(patientService.findAll());
+    }
+
+    @GetMapping("/{id}")
+    public ResponseEntity<Object> getPatientById(@PathVariable(value = "id")UUID id){
+        Optional<Patient> patientOptional = patientService.findById(id);
+        if (patientOptional.isEmpty()){
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Patient not found");
+        }
+        return ResponseEntity.status(HttpStatus.OK).body(patientOptional.get());
+    }
+
+    @GetMapping("/findByCpf")
+    public ResponseEntity<Optional<Patient>> getFindByCpf(@Validated @RequestParam(value = "cpf")String cpf){
+        return ResponseEntity.status(HttpStatus.OK).body(patientService.findByCpf(cpf));
+    }
+
+    @GetMapping("/findByFullName")
+    public ResponseEntity<Optional<Patient>> getFindByFullName(@Validated @RequestParam(value = "fullName")String fullName){
+        return  ResponseEntity.status(HttpStatus.OK).body(patientService.findByFullName(fullName));
+    }
+
+    @PostMapping
+    public ResponseEntity<Object> savePatient (@Valid PatientDto patientDto, HttpServletRequest request) throws IOException {
+        var patient = new Patient();
+        BeanUtils.copyProperties(patientDto, patient);
+        return ResponseEntity.status(HttpStatus.CREATED).body(patientService.save(patient));
+    }
+
+    @DeleteMapping("/{id}")
+    public ResponseEntity<Object> deletePatient (@PathVariable(value = "id")UUID id){
+        Optional<Patient> patientOptional = patientService.findById(id);
+        if (patientOptional.isEmpty()){
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Patient not found");
+        }
+        patientService.softDelete(patientOptional.get());
+        return ResponseEntity.status(HttpStatus.OK).body("Patient deleted succesfuly");
+    }
+
+    @PostMapping("/{id}")
+    public ResponseEntity<Object> updatePatient (@PathVariable(value = "id")UUID id, HttpServletRequest request) {
+        Optional<Patient> patientOptional = patientService.findById(id);
+        if (patientOptional.isEmpty()) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Patient not found");
+        }
+        Map<Object, Object> objectMap = new HashMap<>();
+        for (Map.Entry<String, String[]> entry : request.getParameterMap().entrySet()){
+            objectMap.put(entry.getKey(), entry.getValue()[0]);
+        }
+        patientService.partialUpdate(patientOptional.get(), objectMap);
+        return ResponseEntity.status(HttpStatus.OK).body(patientOptional.get());
+    }
+}
Index: api/src/main/java/com/project/api/models/Patient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/main/java/com/project/api/models/Patient.java b/api/src/main/java/com/project/api/models/Patient.java
new file mode 100644
--- /dev/null	
+++ b/api/src/main/java/com/project/api/models/Patient.java	
@@ -0,0 +1,45 @@
+package com.project.api.models;
+
+import jakarta.persistence.*;
+import lombok.*;
+import jakarta.persistence.Entity;
+
+
+import java.io.Serializable;
+import java.time.LocalDateTime;
+import java.util.UUID;
+
+@Entity
+@Data
+@Getter
+@Setter
+@Table(name = "TB_PATIENT")
+public class Patient implements Serializable {
+    private static final long serialVersonUID = 1L;
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.AUTO)
+    private UUID id;
+
+    @Column(nullable = false, length = 256)
+    private String fullName;
+
+    @Column(nullable = false, length = 50)
+    private String cpf;
+
+    @Column(nullable = false)
+    private LocalDateTime birthDate;
+
+    @Column(nullable = false, length = 50)
+    private String sex;
+
+    @Column(nullable = false)
+    private LocalDateTime menstuDate;
+
+    @Column(nullable = false, length = 50)
+    private String telephone;
+
+    @Column(nullable = false)
+    private Boolean active;
+
+}
Index: api/src/main/java/com/project/api/repositories/PatientRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/main/java/com/project/api/repositories/PatientRepository.java b/api/src/main/java/com/project/api/repositories/PatientRepository.java
new file mode 100644
--- /dev/null	
+++ b/api/src/main/java/com/project/api/repositories/PatientRepository.java	
@@ -0,0 +1,21 @@
+package com.project.api.repositories;
+
+import com.project.api.models.Patient;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+import java.util.Optional;
+import java.util.UUID;
+
+@Repository
+public interface PatientRepository extends JpaRepository <Patient, UUID> {
+    List<Patient> findAll();
+
+    Optional<Patient> findById(UUID id);
+
+    Optional<Patient> findByFullName(String fullName);
+
+    Optional<Patient> findByCpf(String cpf);
+
+}
Index: api/src/main/java/com/project/api/dtos/PatientDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/main/java/com/project/api/dtos/PatientDto.java b/api/src/main/java/com/project/api/dtos/PatientDto.java
new file mode 100644
--- /dev/null	
+++ b/api/src/main/java/com/project/api/dtos/PatientDto.java	
@@ -0,0 +1,25 @@
+package com.project.api.dtos;
+
+import jakarta.validation.constraints.NotBlank;
+import lombok.Data;
+
+import java.time.LocalDateTime;
+
+@Data
+public class PatientDto {
+
+    @NotBlank
+    private String fullName;
+    @NotBlank
+    private String cpf;
+    @NotBlank
+    private LocalDateTime birthDate;
+    @NotBlank
+    private String sex;
+    @NotBlank
+    private LocalDateTime menstuDate;
+    @NotBlank
+    private String telephone;
+    @NotBlank
+    private Boolean active;
+}
diff --git a/api/src/main/java/com/project/api/controllers/nada.txt b/api/src/main/java/com/project/api/controllers/nada.txt
deleted file mode 100644
